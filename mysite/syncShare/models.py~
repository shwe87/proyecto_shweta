from django.db import models
from django.contrib.auth.models import User
from django.contrib.auth.models import Group
from django.core.exceptions import ValidationError
from mptt.models import MPTTModel, TreeForeignKey
import json
import time
import datetime


# @class validate_type: This is to validate the typeOf field in the user's table.
# 	--@valid {boolean}: checks if the given value is valid or not, being the valid
#			    ones: tabs, bookmarks or history
#	--Raise ValidationError if it is not one of the specified valid values.			    
def validate_type(value):
	valid = ((value == 'tabs') or (value == 'bookmarks') or (value == 'history'))
    	if (valid == False):
    		#Raise validation error, if not valid.
        	raise ValidationError(u'%s is not a valid type' % value)	





class UsersDevice(models.Model):
	user = models.ForeignKey(User)
	device_id = models.TextField(unique=True)
	device_name = models.TextField()
	
	def __unicode__(self):
		return u'%(user)s has a device %(device)s' %{
			'user': (self.user.email),
			'device': (self.device_name)
		}
		
	def serialize_to_json(self):
		return json.dumps(self.serializable_object())
		
	def serializable_object(self):
		obj = {'user':self.user.email,'device_id':self.device_id,'device_name':self.device_name}
		return obj
	
def encode(text):
    """
    For printing unicode characters to the console.
    """
    return text.encode('utf-8')		

class Bookmark(MPTTModel):
    	itemId = models.IntegerField()
	title = models.TextField()
	parent = TreeForeignKey('self', null=True, blank=True, related_name='children')
	parentId = models.IntegerField()
	url = models.URLField()
	dateAdded = models.DateTimeField(editable=True,null=True,blank=True)
	lastModified = models.DateTimeField(editable=True,null=True,blank=True)
	time = models.DateTimeField(editable=True,null=True,blank=True)
	ifFolder = models.BooleanField()
	unique = models.TextField(unique=True)
	owner = models.ForeignKey(User)
	device = models.ForeignKey(UsersDevice)


	class MPTTMeta:
        	order_insertion_by = ['title']
        
        def __init__(self, *args, **kwargs):
        	super(Bookmark, self).__init__(*args, **kwargs)
        	#print self.device.device_id
        	#print self.itemId
        	#print self.title
        	#print self.parentId
        	#print self.owner.email
        	#Only itemId doesn't change, title may change,
        	self.unique = str(str(self.device.device_id) + str(self.itemId) + str(self.owner.email))
        	#print self.unique
        	
        def __unicode__(self):
		return (u'%s' %(self.title))
		
	def serialize_to_json(self):
		return json.dumps(self.serializable_object())

	def serializable_object(self):
		obj = {'itemId':self.itemId,'title':self.title,'parentId':self.parentId}
		#,'parentId':self.parentId,'ifFolder':self.ifFolder,'deviceId':self.device.device_id}
		#if self.ifFolder:
			#print self.title + "is not a leaf"
			#if self.parentId != 0:
		#print self.url
		if self.url:
			#print "Has url"
			obj['url'] = self.url
		if self.dateAdded:
			obj['dateAdded'] = str(self.dateAdded)
		if self.lastModified:
			obj['lastModified'] = str(self.lastModified)
		if self.time:	
			obj['time'] = str(self.time)
		obj['ifFolder'] = self.ifFolder
		if (self.ifFolder):
			obj['children'] = []
			for child in self.get_children():
				obj['children'].append(child.serializable_object())
			#obj['children'] = []
			#for child in self.get_children():
			#	obj['children'].append(child.serializable_object())
		return obj
			

class Tab(models.Model):
	url = models.URLField()
	title = models.TextField()
	tabID = models.TextField()
	device = models.ForeignKey(UsersDevice)
	owner = models.ForeignKey(User)
	unique = models.TextField(unique=True)
	
	def __init__(self, *args, **kwargs):
        	super(Tab, self).__init__(*args, **kwargs)
        	self.unique = str(self.device.device_id + str(self.url)+str(self.owner.email))
        
        def __unicode__(self):
		return u'%(user)s is saving %(title)s in %(device)s' %{
			'user': (self.owner.email),
			'title' : (self.title),
			'device': (self.device.device_name)
		}


        def serialize_to_json(self):
		return json.dumps(self.serializable_object())
		
	def serializable_object(self):
		obj = {'title':self.title,'url':self.url,'deviceId':self.device.device_id,'tabId':str(self.tabID)}
		return obj


class History(models.Model):
	url = models.URLField() 
	title = models.TextField()
	time = models.DateTimeField(editable=True,blank=True,null=True)
	device = models.ForeignKey(UsersDevice)
	owner = models.ForeignKey(User)
	unique = models.TextField(unique=True)
	visited = models.IntegerField()
	
	class Meta:
		ordering = ['time']
	
        def __init__(self, *args, **kwargs):
        	super(History, self).__init__(*args, **kwargs)
        	self.unique = str(self.device.device_id + str(self.url) +str(self.owner.email))
        		
	def __unicode__(self):
		return (u'%s' %(self.title))
	
	def serialize_to_json(self):
		return json.dumps(self.serializable_object())
		
	def serializable_object(self):
		obj = {'title':self.title,'url':self.url,'deviceId':self.device.device_id,'time':str(self.time),'visited':self.visited}
		return obj
	
	
			

# @class Sync: This table contains all saved/synced items by a user.
#	-- @user {User}: is the user who saved a item, it's a reference to the auth_user table.
#	-- @title {String}: is the saved page's title.
#	-- @url {URL}: is the saved page's url.
#	-- @typeOf {string}: can only be tabs, bookmarks or history.
class Sync(models.Model):
	user = models.ForeignKey(User)
	title = models.TextField(max_length = 250)	
	url = models.URLField()
	typeOf = models.CharField(max_length = 9, validators = [validate_type])
	unique = models.CharField(max_length=100, null=True, blank=True, unique=True)
		
	def __unicode__(self):
        	 return (u'%(owner)s has saved a %(typeOf)s with title %(title)s') %{
        	 	'owner': (self.user.email),
        	 	'typeOf': (self.typeOf),
        	 	'title': (self.title),
        	 }
        
        


class MyGroup(models.Model):
	creator = models.ForeignKey(User, related_name='creator_set')
	members = models.ManyToManyField(User, related_name='members_set')
	groupName = models.CharField(max_length=100)
	unique = models.CharField(max_length=100, null=True, blank=True, unique=True)
	
	def __unicode__ (self):
		return (u'%s' %(self.groupName))
	



# @class Share {model}: This table contains the shared items between two users.
#	-- @shared {Sync model}: is the reference to the sync model, it is the shared item.
#	-- @shared_with {User}: With whom it is shared with
class Share(models.Model):
	shared = models.ManyToManyField(Sync)
	shared_bookmarks = models.ManyToManyField(Bookmark)
	shared_history = models.ManyToManyField(History)
	shared_tabs = models.ManyToManyField(Tab)
	shared_from = models.ForeignKey(User,related_name='shared_from_set')
	typeOf_share = models.CharField(max_length=5)
	#friend = models.ForeignKey(User, related_name='friends')
	shared_with_group = models.ManyToManyField(MyGroup)
	shared_with_emails = models.ManyToManyField(User, related_name='shared_with_emails_set')
	unique = models.CharField(max_length=100, null=True, blank=True, unique=True)
	
	def __unicode__(self):
		return (u'%(owner)s is sharing') %{
        	 	'owner': (self.shared_from.email),
        	 }
	

class UserGroup(models.Model):
	user = models.OneToOneField(User)
	groups = models.ManyToManyField(MyGroup)
	
	def __unicode__ (self):
		return (u'%s' %(self.user.email))

  
"""
# @class UsersData: This table contains all user's saved features
#	-- @user {User}: is the user associated to this table.
#	-- @data {Data}: is the data to save for this user.	
class UsersData(models.Model):
	user = models.EmailField(primary_key=True,unique=True)
	data = models.ManyToManyField(Data)
	#title = models.TextField(max_length = 250)	
	#url = models.URLField()
	#typeOf = models.CharField(max_length = 9, validators = [validate_type])
		
	
	def __unicode__(self):
		return self.user

"""




